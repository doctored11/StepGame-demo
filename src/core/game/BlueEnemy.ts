import * as THREE from "three";
import { Enemy } from "./Enemy";
import { Tile } from "./Tile";
import { findPath, findReachableTiles } from "./Pathfinder";

export class BlueEnemy extends Enemy {
  private async moveRandomly(gm: any, playerTile: Tile) {
    const blockedTiles = new Set<Tile>([playerTile]);

    const reachableTiles: Tile[] = findReachableTiles(this.currentTile, 2, gm, {
      blockedTiles,
    });

    const options = reachableTiles.filter((t) => t !== this.currentTile);

    if (options.length === 0) {
      console.log("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∞–π–ª–æ–≤ –¥–ª—è _—Å–ª—É—á–∞–π–Ω–æ–≥–æ –¥–≤–∏–∂–µ–Ω–∏—è.");
      return;
    }

    const randomIndex = Math.floor(Math.random() * options.length);
    const targetTile = options[randomIndex];

    const pathToTarget = findPath(this.currentTile, targetTile, gm);

    const steps = pathToTarget.slice(0, 2);

    if (steps.length > 0) {
      console.log(
        `üé∞ —Å–∏–Ω–∏–π –∏–¥—ë—Ç —Ä–∞–Ω–¥–æ–º–Ω–æ –ø–æ : ${steps.map((t) => t.id).join(" ‚Üí ")}`
      );
      await this.moveAlongTiles(steps);
      this.currentTile = steps[steps.length - 1];
      console.log(`‚úÖ —Å–∏–Ω–∏–π —Ç–µ–ø–µ—Ä—å –Ω–∞ —Ç–∞–π–ª–µ: ${this.currentTile.id}`);
    }
  }

  public async takeTurn(): Promise<void> {
    const gm = this.master.getGameMap();
    const current = this.currentTile;
    const playerTile = this.master.getPlayer().currentTile;

    const berryTile = gm.getAllTiles().find((t) => t.berry != null);
    if (!berryTile) {
      console.log(" ‚ùå [BlueEnemy] ‚ùå –ù–µ—Ç —è–≥–æ–¥ –Ω–∞ –∫–∞—Ä—Ç–µ.");
      return;
    }

    console.log("\n [–•–û–î —Å–∏–Ω–µ–≥–æ]");
    console.log(`üü¶ —Å–∏–Ω–∏–π –Ω–∞—á–∏–Ω–∞–µ—Ç –Ω–∞ —Ç–∞–π–ª–µ: ${current.id}`);
    console.log(`üòä –∏–≥—Ä–æ–∫ —Å—Ç–æ–∏—Ç –Ω–∞ —Ç–∞–π–ª–µ: ${playerTile.id}`);
    console.log(`üçì –Ø–≥–æ–¥–∞ –Ω–∞ —Ç–∞–π–ª–µ:  ${berryTile.id}`);

    const pathToPlayer = findPath(current, playerTile, gm, {
      allowEndOnBlocked: true,
    });

    const pathToPlayerIds = pathToPlayer.map((t) => t.id);
    console.log(` üó°Ô∏è –ü—É—Ç—å –¥–æ –∏–≥—Ä–æ–∫–∞: ${pathToPlayerIds.join(" ‚Üí ")}`);

    if (pathToPlayer.length === 0) {
      console.log(`‚öîÔ∏è —Å–∏–Ω–∏–π —É–∂–µ –Ω–∞ —Ç–∞–π–ª–µ –∏–≥—Ä–æ–∫–∞`);
      return;
    }

    if (pathToPlayer.length === 2) {
      const steps = pathToPlayer.slice(0, 2);
      console.log(
        `‚öîÔ∏è —Å–∏–Ω–∏–π –¥–≤–∏–≥–∞–µ—Ç—Å—è –∏ –ê—Ç–∞–∫—É–µ—Ç –∏–≥—Ä–æ–∫–∞ —á–µ—Ä–µ–∑ —Ç–∞–π–ª—ã: ${steps
          .map((t) => t.id)
          .join(" ‚Üí ")}`
      );
      await this.moveAlongTiles(steps);
      this.currentTile = steps[steps.length - 1];
      console.log(`‚úÖ —Å–∏–Ω–∏–π —Ç–µ–ø–µ—Ä—å –Ω–∞ —Ç–∞–π–ª–µ: ${this.currentTile.id}`);
      return;
    }

    const playerToBerry = findPath(playerTile, berryTile, gm);
    const playerPathIds = playerToBerry.map((t) => t.id);
    console.log(`üë£ –ü—É—Ç—å –∏–≥—Ä–æ–∫–∞ –∫ —è–≥–æ–¥–µ: ${playerPathIds.join(" ‚Üí ")}`);

    if (playerToBerry.length === 0) {
      console.log("‚ùå –ò–≥—Ä–æ–∫ –Ω–µ –º–æ–∂–µ—Ç –¥–æ–±—Ä–∞—Ç—å—Å—è –¥–æ —è–≥–æ–¥—ã.");
      return;
    }

    const midIndex = Math.floor(playerToBerry.length / 2);
    const midTile = playerToBerry[midIndex];
    console.log(`üéØ –¶–µ–ª–µ–≤–æ–π —Ç–∞–π–ª  : ${midTile.id}`);

    if (midTile === current) {
      console.log("üåÄ —Å–∏–Ω–∏–π —É–∂–µ —Å—Ç–æ–∏—Ç –Ω–∞ —Ü–µ–ª–µ–≤–æ–º —Ç–∞–π–ª–µ.");
      
      await this.moveRandomly(gm, playerTile);
      return;
    }

    const pathToMid = findPath(current, midTile, gm, {
      blockedTiles: new Set([playerTile]),
      allowEndOnBlocked: false,
    });

    const pathToMidIds = pathToMid.map((t) => t.id);
    console.log(`üö∂ –ü—É—Ç—å —Å–∏–Ω–∏–≥–æ –∫ —Ü–µ–ª–∏: ${pathToMidIds.join(" ‚Üí ")}`);

    if (pathToMid.length === 0) {
      console.log("‚ùå—Å–∏–Ω–∏–π –Ω–µ –º–æ–∂–µ—Ç –¥–æ–±—Ä–∞—Ç—å—Å—è –¥–æ —Ü–µ–ª–∏.");
      await this.moveRandomly(gm, playerTile);
      return;
    }

    let steps: Tile[] = [];

    if (pathToMid.length >= 2) {
      steps = pathToMid.slice(0, 2);
    } else if (pathToMid.length === 1) {
      const firstStep = pathToMid[0];

      const neighbors = findReachableTiles(firstStep, 1, gm, {
        blockedTiles: new Set([playerTile, current]),
      });

      if (neighbors.length > 0) {
        steps = [firstStep, neighbors[0]];
      } else {
        steps = [firstStep];
      }
    }

    if (steps.length > 0) {
      console.log(
        `‚û°Ô∏è —Å–∏–Ω–∏–π –¥–µ–ª–∞–µ—Ç —à–∞–≥–∏ : ${steps.map((t) => t.id).join(" ‚Üí ")}`
      );
      await this.moveAlongTiles(steps);
      this.currentTile = steps[steps.length - 1];
      console.log(`‚úÖ —Å–∏–Ω–∏–π —Ç–µ–ø–µ—Ä—å –Ω–∞ —Ç–∞–π–ª–µ: ${this.currentTile.id}`);
    } else {
      await this.moveRandomly(gm, playerTile);
    }
  }
}
